default:
  tags:
    - backend
    - kapibara
  image: docker:24.0.5

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_COMMIT_BRANCH == 'main'

stages:
  - build-docker
  - tests & linters

services:
  - docker:24.0.5-dind
  - postgres:15.3

Build & Push Docker:
  stage: build-docker
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull "${CI_REGISTRY_IMAGE}:latest" || true
    - docker build --cache-from "${CI_REGISTRY_IMAGE}:latest"
      -t "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
      -t "${CI_REGISTRY_IMAGE}:${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME-latest}"
      .
    - docker push "${CI_REGISTRY_IMAGE}" --all-tags

Run pytest:
  stage: tests & linters
  needs:
    - Build & Push Docker
  script:
    - DATABASE_URL="psql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_PORT_5432_TCP_ADDR}:5432/${POSTGRES_DB}"
      docker compose -f docker-compose.ci.yml run kapibara-monolith-ci
      pytest --cov --cov-report term --cov-report xml:coverage.xml --junit-xml=report.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml

Run linters:
  needs:
    - Build & Push Docker
  stage: tests & linters
  script:
    - docker compose -f docker-compose.ci.yml run kapibara-monolith-ci pre-commit run -a

variables:
  POSTGRES_DB: "kapibara"
  POSTGRES_USER: "kapibara"
  POSTGRES_PASSWORD: "kapibara"
  DATABASE_URL: "psql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_PORT_5432_TCP_ADDR}:5432/${POSTGRES_DB}"
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
